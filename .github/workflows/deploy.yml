name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug SSH Information
        run: |
          echo "🔍 Debugging SSH Connection"
          echo "Host: ${{ secrets.EC2_HOST }}"
          echo "Username: ${{ secrets.EC2_USERNAME }}"
          echo "SSH Key Check: ${{ secrets.EC2_SSH_KEY != '' && 'Present' || 'Missing' }}"
      
      - name: Setup SSH Directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ls -la ~/.ssh/deploy_key
          
      - name: Validate SSH Key Format
        run: |
          echo "📝 Validating SSH key format..."
          if ! grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "❌ SSH key is missing BEGIN header"
            exit 1
          fi
          if ! grep -q "END RSA PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "❌ SSH key is missing END footer"
            exit 1
          fi
          echo "✅ SSH key format validation passed"
      
      - name: Test SSH Connection
        id: ssh_test
        continue-on-error: true
        run: |
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "SSH Connection Successful"'
      
      - name: Check SSH Connection Result
        if: steps.ssh_test.outcome == 'failure'
        run: |
          echo "❌ SSH Connection Failed"
          echo "Debug Information:"
          echo "Key Permissions:"
          ls -la ~/.ssh/deploy_key
          echo "Key Format:"
          ssh-keygen -l -f ~/.ssh/deploy_key || echo "Invalid key format"
          exit 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          echo "📦 Installing dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            echo "⚠️ No package-lock.json found, installing without lockfile..."
            npm install
          fi
          
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          debug: true
          script_stop: true
          # Add timeout for long-running deployments
          command_timeout: "30m"
          script: |
            set -e
            echo "🚀 Starting deployment..."
            
            # Update package lists and install dependencies
            echo "📦 Updating system packages..."
            sudo apt-get update && sudo apt-get install -y curl git build-essential python3 || {
              echo "❌ Failed to install system packages"
              exit 1
            }
            
            # Install Node.js and npm
            echo "📦 Installing Node.js and npm..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
            sudo apt-get install -y nodejs || {
              echo "❌ Failed to install Node.js"
              exit 1
            }
            
            # Install additional build tools
            echo "📦 Installing additional build tools..."
            sudo apt-get install -y gcc g++ make || {
              echo "❌ Failed to install build tools"
              exit 1
            }
            
            # Install PM2 globally
            echo "📦 Installing PM2..."
            sudo npm install -g pm2 || {
              echo "❌ Failed to install PM2"
              exit 1
            }
            
            # Create deployment directory
            echo "📂 Creating deployment directory..."
            sudo mkdir -p /var/www/strapi-cms
            sudo chown -R $USER:$USER /var/www/strapi-cms || {
              echo "❌ Failed to set directory permissions"
              exit 1
            }
            
            # Clone or update repository
            if [ ! -d "/var/www/strapi-cms/.git" ]; then
              echo "📥 Cloning repository..."
              git clone https://github.com/Last-Hash/lasthash-strapi-cms.git /var/www/strapi-cms || {
                echo "❌ Failed to clone repository"
                exit 1
              }
            fi
            
            cd /var/www/strapi-cms || {
              echo "❌ Failed to change directory"
              exit 1
            }
            echo "📂 Current directory: $(pwd)"
            
            # Pull latest changes
            echo "📦 Running git pull..."
            git pull origin main || {
              echo "❌ Failed to pull latest changes"
              exit 1
            }
            
            # Clean install dependencies with swap space to prevent OOM
            echo "📥 Installing dependencies..."
            rm -rf node_modules
            rm -f package-lock.json # Remove lockfile to avoid conflicts
            
            # Setup swap space to prevent OOM errors - with better error handling
            echo "💾 Setting up swap space..."
            if [ ! -f /swapfile ]; then
              # Try to create swap with error handling
              sudo fallocate -l 2G /swapfile || {
                echo "⚠️ fallocate failed, trying dd method..."
                sudo dd if=/dev/zero of=/swapfile bs=1M count=2048 || {
                  echo "⚠️ Failed to create swap file, but continuing deployment"
                }
              }
              
              # Only proceed with swap setup if the file was created
              if [ -f /swapfile ]; then
                sudo chmod 600 /swapfile || echo "⚠️ chmod failed but continuing"
                sudo mkswap /swapfile || echo "⚠️ mkswap failed but continuing"
                sudo swapon /swapfile || echo "⚠️ swapon failed but continuing"
                echo "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab
                echo "✅ Swap space created (or attempted)"
              fi
            else
              echo "✅ Swap file already exists"
              # Try to activate existing swap file
              sudo swapon /swapfile 2>/dev/null || echo "⚠️ Could not enable existing swap file"
            fi
            
            # Continue regardless of swap setup success
            sudo swapon --show || echo "⚠️ No swap space available"
            
            # Install dependencies with memory optimizations
            echo "📦 Installing dependencies with optimizations..."
            export NODE_OPTIONS="--max_old_space_size=1024"
            npm install --no-fund --no-audit --prefer-offline --production=false --no-optional || {
              echo "⚠️ Full install failed, trying minimal install..."
              npm install --production --no-optional
            }
            
            # Setup environment file with correct values
            echo "📝 Setting up environment file..."
            echo "HOST=0.0.0.0" > .env
            echo "PORT=1337" >> .env
            echo "APP_KEYS=toBeModified1,toBeModified2,toBeModified3,toBeModified4" >> .env
            echo "API_TOKEN_SALT=b6c3c3f1d8e70c8529f775881b761f70" >> .env
            echo "ADMIN_JWT_SECRET=787ea12b6507b7cdac4fdd7af0ede5a4" >> .env
            echo "TRANSFER_TOKEN_SALT=8c9b95d2e1f1d4a2b84a8e4c984c6f32" >> .env
            echo "JWT_SECRET=3fb45e852d67f1c4a88e2c52d0b79f49" >> .env
            echo "DATABASE_CLIENT=sqlite" >> .env
            echo "DATABASE_FILENAME=.tmp/data.db" >> .env
            
            # Build application with debugging
            echo "🏗️ Building application..."
            NODE_ENV=production npm run build -- --debug || {
              echo "❌ Failed to build application"
              echo "Trying alternative build approach..."
              # Try alternative build approach if direct build fails
              NODE_ENV=production npm run build:admin || {
                echo "❌ Failed to build admin"
                exit 1
              }
              NODE_ENV=production npm run build:backend || {
                echo "❌ Failed to build backend"
                exit 1
              }
            }
            
            # Setup and start PM2
            echo "🔄 Configuring PM2..."
            pm2 delete strapi 2>/dev/null || true
            pm2 start npm --name "strapi" -- start || {
              echo "❌ Failed to start PM2 process"
              exit 1
            }
            pm2 save || {
              echo "❌ Failed to save PM2 configuration"
              exit 1
            }
            
            # Setup PM2 startup
            echo "⚙️ Setting up PM2 startup..."
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp /home/$USER || {
              echo "❌ Failed to setup PM2 startup"
              exit 1
            }
            
            # Install and configure Nginx
            echo "🌐 Setting up Nginx..."
            sudo apt-get install -y nginx || echo "⚠️ Failed to install Nginx but continuing"
            
            # Setup Nginx configuration for Strapi
            echo "📝 Creating Nginx configuration..."
            echo "server {" | sudo tee /etc/nginx/sites-available/strapi > /dev/null
            echo "    listen 80;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "    server_name crm.lasthash.com;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "    location / {" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_pass http://localhost:1337;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_http_version 1.1;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_set_header Upgrade \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_set_header Connection \"upgrade\";" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_set_header Host \$host;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_set_header X-Real-IP \$remote_addr;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_set_header X-Forwarded-Proto \$scheme;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_cache_bypass \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        proxy_read_timeout 90;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "        client_max_body_size 100M;" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "    }" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            echo "}" | sudo tee -a /etc/nginx/sites-available/strapi > /dev/null
            
            # Enable site and configure Nginx
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/strapi /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl restart nginx
            
            # Install SSL certificates with Let's Encrypt
            echo "🔒 Setting up SSL with Let's Encrypt..."
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx || echo "⚠️ Failed to install Certbot but continuing"
            
            # Request certificate with non-interactive mode
            sudo certbot --nginx -d crm.lasthash.com --non-interactive --agree-tos --email shiv@srapsware.com || echo "⚠️ SSL certificate request failed but continuing"
            
            # Setup auto-renewal
            sudo systemctl enable certbot.timer
            sudo systemctl start certbot.timer
            
            echo "✅ Deployment complete!"
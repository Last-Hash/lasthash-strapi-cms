name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug SSH Information
        run: |
          echo "🔍 Debugging SSH Connection"
          echo "Host: ${{ secrets.EC2_HOST }}"
          echo "Username: ${{ secrets.EC2_USERNAME }}"
          echo "SSH Key Check: ${{ secrets.EC2_SSH_KEY != '' && 'Present' || 'Missing' }}"
      
      - name: Setup SSH Directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ls -la ~/.ssh/deploy_key
          
      - name: Validate SSH Key Format
        run: |
          echo "📝 Validating SSH key format..."
          if ! grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "❌ SSH key is missing BEGIN header"
            exit 1
          fi
          if ! grep -q "END RSA PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "❌ SSH key is missing END footer"
            exit 1
          fi
          echo "✅ SSH key format validation passed"
      
      - name: Test SSH Connection
        id: ssh_test
        continue-on-error: true
        run: |
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "SSH Connection Successful"'
      
      - name: Check SSH Connection Result
        if: steps.ssh_test.outcome == 'failure'
        run: |
          echo "❌ SSH Connection Failed"
          echo "Debug Information:"
          echo "Key Permissions:"
          ls -la ~/.ssh/deploy_key
          echo "Key Format:"
          ssh-keygen -l -f ~/.ssh/deploy_key || echo "Invalid key format"
          exit 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          echo "📦 Installing dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            echo "⚠️ No package-lock.json found, installing without lockfile..."
            npm install
          fi
          
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          debug: true
          script_stop: true
          # Add timeout for long-running deployments
          command_timeout: "30m"
          script: |
            set -e
            echo "🚀 Starting deployment..."
            
            # Update package lists and install dependencies
            echo "📦 Updating system packages..."
            sudo apt-get update && sudo apt-get install -y curl git || {
              echo "❌ Failed to install system packages"
              exit 1
            }
            
            # Install Node.js and npm
            echo "📦 Installing Node.js and npm..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
            sudo apt-get install -y nodejs || {
              echo "❌ Failed to install Node.js"
              exit 1
            }
            
            # Install PM2 globally
            echo "📦 Installing PM2..."
            sudo npm install -g pm2 || {
              echo "❌ Failed to install PM2"
              exit 1
            }
            
            # Create deployment directory
            echo "📂 Creating deployment directory..."
            sudo mkdir -p /var/www/strapi-cms
            sudo chown -R $USER:$USER /var/www/strapi-cms || {
              echo "❌ Failed to set directory permissions"
              exit 1
            }
            
            # Clone or update repository
            if [ ! -d "/var/www/strapi-cms/.git" ]; then
              echo "📥 Cloning repository..."
              git clone https://github.com/Last-Hash/lasthash-strapi-cms.git /var/www/strapi-cms || {
                echo "❌ Failed to clone repository"
                exit 1
              }
            fi
            
            cd /var/www/strapi-cms || {
              echo "❌ Failed to change directory"
              exit 1
            }
            echo "📂 Current directory: $(pwd)"
            
            # Pull latest changes
            echo "📦 Running git pull..."
            git pull origin main || {
              echo "❌ Failed to pull latest changes"
              exit 1
            }
            
            # Clean install dependencies
            echo "📥 Installing dependencies..."
            rm -rf node_modules
            npm ci || {
              echo "❌ Failed to install dependencies"
              exit 1
            }
            
            # Setup environment file
            echo "📝 Setting up environment file..."
            cat > .env << 'EOL'
HOST=0.0.0.0
PORT=1337
APP_KEYS=${{ secrets.APP_KEYS }}
API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
JWT_SECRET=${{ secrets.JWT_SECRET }}
DATABASE_CLIENT=sqlite
DATABASE_FILENAME=.tmp/data.db
EOL
            
            # Build application
            echo "🏗️ Building application..."
            npm run build || {
              echo "❌ Failed to build application"
              exit 1
            }
            
            # Setup and start PM2
            echo "🔄 Configuring PM2..."
            pm2 delete strapi 2>/dev/null || true
            pm2 start npm --name "strapi" -- start || {
              echo "❌ Failed to start PM2 process"
              exit 1
            }
            pm2 save || {
              echo "❌ Failed to save PM2 configuration"
              exit 1
            }
            
            # Setup PM2 startup
            echo "⚙️ Setting up PM2 startup..."
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp /home/$USER || {
              echo "❌ Failed to setup PM2 startup"
              exit 1
            }
            
            echo "✅ Deployment complete!"